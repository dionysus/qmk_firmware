#include QMK_KEYBOARD_H

// OLED - Display a bitmap image at the top of the screen
void render_oled(void) {
    static const char PROGMEM img_oled[] = { // Default Mittens Character
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 
        0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
        0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
        0x00, 0x00, 0x00, 0xf8, 0xfc, 0xfe, 0x7f, 0x7f, 0x4f, 0x4f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
        0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4f, 0x4f, 0x7f, 0x7f, 0xff, 0xfe, 0xfc, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x07, 0x07, 0x1f, 0x78, 0x78, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
        0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0x78, 0x78, 0x1f, 0x1f, 0x07, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf3, 0xf3, 0xf3, 
        0xf3, 0xf3, 0xf3, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0xfe, 0x7c, 0x7c, 0x18, 0x18, 0x80, 0xe0, 0xe0, 0xf8, 0xf8, 0xe0, 0xe0, 0xe6, 0xe7, 0xe7, 0xe7, 
        0xe7, 0xe7, 0xe7, 0xe6, 0xe6, 0xe0, 0xf8, 0xf8, 0xe0, 0xe0, 0x80, 0x80, 0x00, 0x60, 0x70, 0xf8, 
        0x03, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xf0, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xf8, 0xf8, 0xe0, 0xe0, 0xe0, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    };
    oled_write_raw_P(img_oled, sizeof(img_oled));
}

// OLED - Display the Modifier Keypress
bool process_record_user(uint16_t keycode, keyrecord_t *record) {
    int cursor_y = 14;
    switch (keycode) {
        case KC_LSFT:
            if (record->event.pressed) {
                oled_set_cursor(1,cursor_y);
                oled_write_P(PSTR("S"), false);
            } else {
                oled_set_cursor(1,cursor_y);
                oled_write_P(PSTR(" "), false);
            }
            break;
        case KC_LCTL:
            if (record->event.pressed) {
                oled_set_cursor(2,cursor_y);
                oled_write_P(PSTR("C"), false);
            } else {
                oled_set_cursor(2,cursor_y);
                oled_write_P(PSTR(" "), false);
            }
            break;
        case KC_LALT:
            if (record->event.pressed) {
                oled_set_cursor(3,cursor_y);
                oled_write_P(PSTR("A"), false);
            } else {
                oled_set_cursor(3,cursor_y);
                oled_write_P(PSTR(" "), false);
            }
            break;
        case KC_LGUI:
            if (record->event.pressed) {
                oled_set_cursor(4,cursor_y);
                oled_write_P(PSTR("C"), false);
            } else {
                oled_set_cursor(4,cursor_y);
                oled_write_P(PSTR(" "), false);
            }
            break;
        default:
            return true; // Process all other keycodes normally
    }
    return true;
}

// OLED - Settings
oled_rotation_t oled_init_user(oled_rotation_t rotation) {
    return OLED_ROTATION_270;  // flips the display -90 degrees (vertical)
}